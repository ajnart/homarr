/* eslint-disable */
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v3/alttitle': {
    get: {
      parameters: {
        query: {
          movieId?: number;
          movieMetadataId?: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['AlternativeTitleResource'][];
            'application/json': components['schemas']['AlternativeTitleResource'][];
            'text/json': components['schemas']['AlternativeTitleResource'][];
          };
        };
      };
    };
  };
  '/api/v3/alttitle/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['AlternativeTitleResource'];
            'application/json': components['schemas']['AlternativeTitleResource'];
            'text/json': components['schemas']['AlternativeTitleResource'];
          };
        };
      };
    };
  };
  '/login': {
    get: {
      responses: {
        /** Success */
        200: unknown;
      };
    };
    post: {
      parameters: {
        query: {
          returnUrl?: string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
      requestBody: {
        content: {
          'multipart/form-data': {
            Username?: string;
            Password?: string;
            RememberMe?: string;
          };
        };
      };
    };
  };
  '/logout': {
    get: {
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/system/backup': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['BackupResource'][];
            'application/json': components['schemas']['BackupResource'][];
            'text/json': components['schemas']['BackupResource'][];
          };
        };
      };
    };
  };
  '/api/v3/system/backup/{id}': {
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/system/backup/restore/{id}': {
    post: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/system/backup/restore/upload': {
    post: {
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/blocklist': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['BlocklistResourcePagingResource'];
            'application/json': components['schemas']['BlocklistResourcePagingResource'];
            'text/json': components['schemas']['BlocklistResourcePagingResource'];
          };
        };
      };
    };
  };
  '/api/v3/blocklist/movie': {
    get: {
      parameters: {
        query: {
          movieId?: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['BlocklistResource'][];
            'application/json': components['schemas']['BlocklistResource'][];
            'text/json': components['schemas']['BlocklistResource'][];
          };
        };
      };
    };
  };
  '/api/v3/blocklist/{id}': {
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/blocklist/bulk': {
    delete: {
      responses: {
        /** Success */
        200: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['BlocklistBulkResource'];
          'text/json': components['schemas']['BlocklistBulkResource'];
          'application/*+json': components['schemas']['BlocklistBulkResource'];
        };
      };
    };
  };
  '/api/v3/calendar': {
    get: {
      parameters: {
        query: {
          start?: string;
          end?: string;
          unmonitored?: boolean;
          includeArtist?: boolean;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['MovieResource'][];
            'application/json': components['schemas']['MovieResource'][];
            'text/json': components['schemas']['MovieResource'][];
          };
        };
      };
    };
  };
  '/api/v3/calendar/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['MovieResource'];
            'application/json': components['schemas']['MovieResource'];
            'text/json': components['schemas']['MovieResource'];
          };
        };
      };
    };
  };
  '/feed/v3/calendar/radarr.ics': {
    get: {
      parameters: {
        query: {
          pastDays?: number;
          futureDays?: number;
          tagList?: string;
          unmonitored?: boolean;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/collection': {
    get: {
      parameters: {
        query: {
          tmdbId?: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['CollectionResource'][];
            'application/json': components['schemas']['CollectionResource'][];
            'text/json': components['schemas']['CollectionResource'][];
          };
        };
      };
    };
    put: {
      responses: {
        /** Success */
        200: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['CollectionUpdateResource'];
          'text/json': components['schemas']['CollectionUpdateResource'];
          'application/*+json': components['schemas']['CollectionUpdateResource'];
        };
      };
    };
  };
  '/api/v3/collection/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['CollectionResource'];
            'application/json': components['schemas']['CollectionResource'];
            'text/json': components['schemas']['CollectionResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['CollectionResource'];
            'application/json': components['schemas']['CollectionResource'];
            'text/json': components['schemas']['CollectionResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['CollectionResource'];
          'text/json': components['schemas']['CollectionResource'];
          'application/*+json': components['schemas']['CollectionResource'];
        };
      };
    };
  };
  '/api/v3/command': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['CommandResource'][];
            'application/json': components['schemas']['CommandResource'][];
            'text/json': components['schemas']['CommandResource'][];
          };
        };
      };
    };
    post: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['CommandResource'];
            'application/json': components['schemas']['CommandResource'];
            'text/json': components['schemas']['CommandResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['CommandResource'];
          'text/json': components['schemas']['CommandResource'];
          'application/*+json': components['schemas']['CommandResource'];
        };
      };
    };
  };
  '/api/v3/command/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['CommandResource'];
            'application/json': components['schemas']['CommandResource'];
            'text/json': components['schemas']['CommandResource'];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/credit': {
    get: {
      parameters: {
        query: {
          movieId?: number;
          movieMetadataId?: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['CreditResource'][];
            'application/json': components['schemas']['CreditResource'][];
            'text/json': components['schemas']['CreditResource'][];
          };
        };
      };
    };
  };
  '/api/v3/credit/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['CreditResource'];
            'application/json': components['schemas']['CreditResource'];
            'text/json': components['schemas']['CreditResource'];
          };
        };
      };
    };
  };
  '/api/v3/customfilter': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['CustomFilterResource'][];
            'application/json': components['schemas']['CustomFilterResource'][];
            'text/json': components['schemas']['CustomFilterResource'][];
          };
        };
      };
    };
    post: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['CustomFilterResource'];
            'application/json': components['schemas']['CustomFilterResource'];
            'text/json': components['schemas']['CustomFilterResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['CustomFilterResource'];
          'text/json': components['schemas']['CustomFilterResource'];
          'application/*+json': components['schemas']['CustomFilterResource'];
        };
      };
    };
  };
  '/api/v3/customfilter/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['CustomFilterResource'];
            'application/json': components['schemas']['CustomFilterResource'];
            'text/json': components['schemas']['CustomFilterResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['CustomFilterResource'];
            'application/json': components['schemas']['CustomFilterResource'];
            'text/json': components['schemas']['CustomFilterResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['CustomFilterResource'];
          'text/json': components['schemas']['CustomFilterResource'];
          'application/*+json': components['schemas']['CustomFilterResource'];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/customformat': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['CustomFormatResource'][];
            'application/json': components['schemas']['CustomFormatResource'][];
            'text/json': components['schemas']['CustomFormatResource'][];
          };
        };
      };
    };
    post: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['CustomFormatResource'];
            'application/json': components['schemas']['CustomFormatResource'];
            'text/json': components['schemas']['CustomFormatResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['CustomFormatResource'];
          'text/json': components['schemas']['CustomFormatResource'];
          'application/*+json': components['schemas']['CustomFormatResource'];
        };
      };
    };
  };
  '/api/v3/customformat/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['CustomFormatResource'];
            'application/json': components['schemas']['CustomFormatResource'];
            'text/json': components['schemas']['CustomFormatResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['CustomFormatResource'];
            'application/json': components['schemas']['CustomFormatResource'];
            'text/json': components['schemas']['CustomFormatResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['CustomFormatResource'];
          'text/json': components['schemas']['CustomFormatResource'];
          'application/*+json': components['schemas']['CustomFormatResource'];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/customformat/schema': {
    get: {
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/delayprofile': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['DelayProfileResource'][];
            'application/json': components['schemas']['DelayProfileResource'][];
            'text/json': components['schemas']['DelayProfileResource'][];
          };
        };
      };
    };
    post: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['DelayProfileResource'];
            'application/json': components['schemas']['DelayProfileResource'];
            'text/json': components['schemas']['DelayProfileResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['DelayProfileResource'];
          'text/json': components['schemas']['DelayProfileResource'];
          'application/*+json': components['schemas']['DelayProfileResource'];
        };
      };
    };
  };
  '/api/v3/delayprofile/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['DelayProfileResource'];
            'application/json': components['schemas']['DelayProfileResource'];
            'text/json': components['schemas']['DelayProfileResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['DelayProfileResource'];
            'application/json': components['schemas']['DelayProfileResource'];
            'text/json': components['schemas']['DelayProfileResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['DelayProfileResource'];
          'text/json': components['schemas']['DelayProfileResource'];
          'application/*+json': components['schemas']['DelayProfileResource'];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/diskspace': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['DiskSpaceResource'][];
            'application/json': components['schemas']['DiskSpaceResource'][];
            'text/json': components['schemas']['DiskSpaceResource'][];
          };
        };
      };
    };
  };
  '/api/v3/downloadclient': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['DownloadClientResource'][];
            'application/json': components['schemas']['DownloadClientResource'][];
            'text/json': components['schemas']['DownloadClientResource'][];
          };
        };
      };
    };
    post: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['DownloadClientResource'];
            'application/json': components['schemas']['DownloadClientResource'];
            'text/json': components['schemas']['DownloadClientResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['DownloadClientResource'];
          'text/json': components['schemas']['DownloadClientResource'];
          'application/*+json': components['schemas']['DownloadClientResource'];
        };
      };
    };
  };
  '/api/v3/downloadclient/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['DownloadClientResource'];
            'application/json': components['schemas']['DownloadClientResource'];
            'text/json': components['schemas']['DownloadClientResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['DownloadClientResource'];
            'application/json': components['schemas']['DownloadClientResource'];
            'text/json': components['schemas']['DownloadClientResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['DownloadClientResource'];
          'text/json': components['schemas']['DownloadClientResource'];
          'application/*+json': components['schemas']['DownloadClientResource'];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/downloadclient/schema': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['DownloadClientResource'][];
            'application/json': components['schemas']['DownloadClientResource'][];
            'text/json': components['schemas']['DownloadClientResource'][];
          };
        };
      };
    };
  };
  '/api/v3/downloadclient/test': {
    post: {
      responses: {
        /** Success */
        200: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['DownloadClientResource'];
          'text/json': components['schemas']['DownloadClientResource'];
          'application/*+json': components['schemas']['DownloadClientResource'];
        };
      };
    };
  };
  '/api/v3/downloadclient/testall': {
    post: {
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/downloadclient/action/{name}': {
    post: {
      parameters: {
        path: {
          name: string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['DownloadClientResource'];
          'text/json': components['schemas']['DownloadClientResource'];
          'application/*+json': components['schemas']['DownloadClientResource'];
        };
      };
    };
  };
  '/api/v3/config/downloadclient': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['DownloadClientConfigResource'];
            'application/json': components['schemas']['DownloadClientConfigResource'];
            'text/json': components['schemas']['DownloadClientConfigResource'];
          };
        };
      };
    };
  };
  '/api/v3/config/downloadclient/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['DownloadClientConfigResource'];
            'application/json': components['schemas']['DownloadClientConfigResource'];
            'text/json': components['schemas']['DownloadClientConfigResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['DownloadClientConfigResource'];
            'application/json': components['schemas']['DownloadClientConfigResource'];
            'text/json': components['schemas']['DownloadClientConfigResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['DownloadClientConfigResource'];
          'text/json': components['schemas']['DownloadClientConfigResource'];
          'application/*+json': components['schemas']['DownloadClientConfigResource'];
        };
      };
    };
  };
  '/api/v3/extrafile': {
    get: {
      parameters: {
        query: {
          movieId?: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['ExtraFileResource'][];
            'application/json': components['schemas']['ExtraFileResource'][];
            'text/json': components['schemas']['ExtraFileResource'][];
          };
        };
      };
    };
  };
  '/api/v3/filesystem': {
    get: {
      parameters: {
        query: {
          path?: string;
          includeFiles?: boolean;
          allowFoldersWithoutTrailingSlashes?: boolean;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/filesystem/type': {
    get: {
      parameters: {
        query: {
          path?: string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/filesystem/mediafiles': {
    get: {
      parameters: {
        query: {
          path?: string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/health': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['HealthResource'][];
            'application/json': components['schemas']['HealthResource'][];
            'text/json': components['schemas']['HealthResource'][];
          };
        };
      };
    };
  };
  '/api/v3/health/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['HealthResource'];
            'application/json': components['schemas']['HealthResource'];
            'text/json': components['schemas']['HealthResource'];
          };
        };
      };
    };
  };
  '/api/v3/history': {
    get: {
      parameters: {
        query: {
          includeMovie?: boolean;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['HistoryResourcePagingResource'];
            'application/json': components['schemas']['HistoryResourcePagingResource'];
            'text/json': components['schemas']['HistoryResourcePagingResource'];
          };
        };
      };
    };
  };
  '/api/v3/history/since': {
    get: {
      parameters: {
        query: {
          date?: string;
          eventType?: components['schemas']['MovieHistoryEventType'];
          includeMovie?: boolean;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['HistoryResource'][];
            'application/json': components['schemas']['HistoryResource'][];
            'text/json': components['schemas']['HistoryResource'][];
          };
        };
      };
    };
  };
  '/api/v3/history/movie': {
    get: {
      parameters: {
        query: {
          movieId?: number;
          eventType?: components['schemas']['MovieHistoryEventType'];
          includeMovie?: boolean;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['HistoryResource'][];
            'application/json': components['schemas']['HistoryResource'][];
            'text/json': components['schemas']['HistoryResource'][];
          };
        };
      };
    };
  };
  '/api/v3/history/failed/{id}': {
    post: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/config/host': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['HostConfigResource'];
            'application/json': components['schemas']['HostConfigResource'];
            'text/json': components['schemas']['HostConfigResource'];
          };
        };
      };
    };
  };
  '/api/v3/config/host/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['HostConfigResource'];
            'application/json': components['schemas']['HostConfigResource'];
            'text/json': components['schemas']['HostConfigResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['HostConfigResource'];
            'application/json': components['schemas']['HostConfigResource'];
            'text/json': components['schemas']['HostConfigResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['HostConfigResource'];
          'text/json': components['schemas']['HostConfigResource'];
          'application/*+json': components['schemas']['HostConfigResource'];
        };
      };
    };
  };
  '/api/v3/exclusions': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['ImportExclusionsResource'][];
            'application/json': components['schemas']['ImportExclusionsResource'][];
            'text/json': components['schemas']['ImportExclusionsResource'][];
          };
        };
      };
    };
    post: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['ImportExclusionsResource'];
            'application/json': components['schemas']['ImportExclusionsResource'];
            'text/json': components['schemas']['ImportExclusionsResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['ImportExclusionsResource'];
          'text/json': components['schemas']['ImportExclusionsResource'];
          'application/*+json': components['schemas']['ImportExclusionsResource'];
        };
      };
    };
  };
  '/api/v3/exclusions/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['ImportExclusionsResource'];
            'application/json': components['schemas']['ImportExclusionsResource'];
            'text/json': components['schemas']['ImportExclusionsResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['ImportExclusionsResource'];
            'application/json': components['schemas']['ImportExclusionsResource'];
            'text/json': components['schemas']['ImportExclusionsResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['ImportExclusionsResource'];
          'text/json': components['schemas']['ImportExclusionsResource'];
          'application/*+json': components['schemas']['ImportExclusionsResource'];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/exclusions/bulk': {
    post: {
      responses: {
        /** Success */
        200: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['ImportExclusionsResource'][];
          'text/json': components['schemas']['ImportExclusionsResource'][];
          'application/*+json': components['schemas']['ImportExclusionsResource'][];
        };
      };
    };
  };
  '/api/v3/importlist': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['ImportListResource'][];
            'application/json': components['schemas']['ImportListResource'][];
            'text/json': components['schemas']['ImportListResource'][];
          };
        };
      };
    };
    post: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['ImportListResource'];
            'application/json': components['schemas']['ImportListResource'];
            'text/json': components['schemas']['ImportListResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['ImportListResource'];
          'text/json': components['schemas']['ImportListResource'];
          'application/*+json': components['schemas']['ImportListResource'];
        };
      };
    };
  };
  '/api/v3/importlist/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['ImportListResource'];
            'application/json': components['schemas']['ImportListResource'];
            'text/json': components['schemas']['ImportListResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['ImportListResource'];
            'application/json': components['schemas']['ImportListResource'];
            'text/json': components['schemas']['ImportListResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['ImportListResource'];
          'text/json': components['schemas']['ImportListResource'];
          'application/*+json': components['schemas']['ImportListResource'];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/importlist/schema': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['ImportListResource'][];
            'application/json': components['schemas']['ImportListResource'][];
            'text/json': components['schemas']['ImportListResource'][];
          };
        };
      };
    };
  };
  '/api/v3/importlist/test': {
    post: {
      responses: {
        /** Success */
        200: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['ImportListResource'];
          'text/json': components['schemas']['ImportListResource'];
          'application/*+json': components['schemas']['ImportListResource'];
        };
      };
    };
  };
  '/api/v3/importlist/testall': {
    post: {
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/importlist/action/{name}': {
    post: {
      parameters: {
        path: {
          name: string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['ImportListResource'];
          'text/json': components['schemas']['ImportListResource'];
          'application/*+json': components['schemas']['ImportListResource'];
        };
      };
    };
  };
  '/api/v3/config/importlist': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['ImportListConfigResource'];
            'application/json': components['schemas']['ImportListConfigResource'];
            'text/json': components['schemas']['ImportListConfigResource'];
          };
        };
      };
    };
  };
  '/api/v3/config/importlist/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['ImportListConfigResource'];
            'application/json': components['schemas']['ImportListConfigResource'];
            'text/json': components['schemas']['ImportListConfigResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['ImportListConfigResource'];
            'application/json': components['schemas']['ImportListConfigResource'];
            'text/json': components['schemas']['ImportListConfigResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['ImportListConfigResource'];
          'text/json': components['schemas']['ImportListConfigResource'];
          'application/*+json': components['schemas']['ImportListConfigResource'];
        };
      };
    };
  };
  '/api/v3/importlist/movie': {
    get: {
      parameters: {
        query: {
          includeRecommendations?: boolean;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
    post: {
      responses: {
        /** Success */
        200: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['MovieResource'][];
          'text/json': components['schemas']['MovieResource'][];
          'application/*+json': components['schemas']['MovieResource'][];
        };
      };
    };
  };
  '/api/v3/indexer': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['IndexerResource'][];
            'application/json': components['schemas']['IndexerResource'][];
            'text/json': components['schemas']['IndexerResource'][];
          };
        };
      };
    };
    post: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['IndexerResource'];
            'application/json': components['schemas']['IndexerResource'];
            'text/json': components['schemas']['IndexerResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['IndexerResource'];
          'text/json': components['schemas']['IndexerResource'];
          'application/*+json': components['schemas']['IndexerResource'];
        };
      };
    };
  };
  '/api/v3/indexer/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['IndexerResource'];
            'application/json': components['schemas']['IndexerResource'];
            'text/json': components['schemas']['IndexerResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['IndexerResource'];
            'application/json': components['schemas']['IndexerResource'];
            'text/json': components['schemas']['IndexerResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['IndexerResource'];
          'text/json': components['schemas']['IndexerResource'];
          'application/*+json': components['schemas']['IndexerResource'];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/indexer/schema': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['IndexerResource'][];
            'application/json': components['schemas']['IndexerResource'][];
            'text/json': components['schemas']['IndexerResource'][];
          };
        };
      };
    };
  };
  '/api/v3/indexer/test': {
    post: {
      responses: {
        /** Success */
        200: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['IndexerResource'];
          'text/json': components['schemas']['IndexerResource'];
          'application/*+json': components['schemas']['IndexerResource'];
        };
      };
    };
  };
  '/api/v3/indexer/testall': {
    post: {
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/indexer/action/{name}': {
    post: {
      parameters: {
        path: {
          name: string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['IndexerResource'];
          'text/json': components['schemas']['IndexerResource'];
          'application/*+json': components['schemas']['IndexerResource'];
        };
      };
    };
  };
  '/api/v3/config/indexer': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['IndexerConfigResource'];
            'application/json': components['schemas']['IndexerConfigResource'];
            'text/json': components['schemas']['IndexerConfigResource'];
          };
        };
      };
    };
  };
  '/api/v3/config/indexer/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['IndexerConfigResource'];
            'application/json': components['schemas']['IndexerConfigResource'];
            'text/json': components['schemas']['IndexerConfigResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['IndexerConfigResource'];
            'application/json': components['schemas']['IndexerConfigResource'];
            'text/json': components['schemas']['IndexerConfigResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['IndexerConfigResource'];
          'text/json': components['schemas']['IndexerConfigResource'];
          'application/*+json': components['schemas']['IndexerConfigResource'];
        };
      };
    };
  };
  '/api/v3/indexerflag': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['IndexerFlagResource'][];
            'application/json': components['schemas']['IndexerFlagResource'][];
            'text/json': components['schemas']['IndexerFlagResource'][];
          };
        };
      };
    };
  };
  '/initialize.js': {
    get: {
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/language': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['LanguageResource'][];
            'application/json': components['schemas']['LanguageResource'][];
            'text/json': components['schemas']['LanguageResource'][];
          };
        };
      };
    };
  };
  '/api/v3/language/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['LanguageResource'];
            'application/json': components['schemas']['LanguageResource'];
            'text/json': components['schemas']['LanguageResource'];
          };
        };
      };
    };
  };
  '/api/v3/localization': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': string;
            'application/json': string;
            'text/json': string;
          };
        };
      };
    };
  };
  '/api/v3/log': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['LogResourcePagingResource'];
            'application/json': components['schemas']['LogResourcePagingResource'];
            'text/json': components['schemas']['LogResourcePagingResource'];
          };
        };
      };
    };
  };
  '/api/v3/log/file': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['LogFileResource'][];
            'application/json': components['schemas']['LogFileResource'][];
            'text/json': components['schemas']['LogFileResource'][];
          };
        };
      };
    };
  };
  '/api/v3/log/file/{filename}': {
    get: {
      parameters: {
        path: {
          filename: string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/manualimport': {
    get: {
      parameters: {
        query: {
          folder?: string;
          downloadId?: string;
          movieId?: number;
          filterExistingFiles?: boolean;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['ManualImportResource'][];
            'application/json': components['schemas']['ManualImportResource'][];
            'text/json': components['schemas']['ManualImportResource'][];
          };
        };
      };
    };
    post: {
      responses: {
        /** Success */
        200: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['ManualImportReprocessResource'][];
          'text/json': components['schemas']['ManualImportReprocessResource'][];
          'application/*+json': components['schemas']['ManualImportReprocessResource'][];
        };
      };
    };
  };
  '/api/v3/mediacover/{movieId}/{filename}': {
    get: {
      parameters: {
        path: {
          movieId: number;
          filename: string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/config/mediamanagement': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['MediaManagementConfigResource'];
            'application/json': components['schemas']['MediaManagementConfigResource'];
            'text/json': components['schemas']['MediaManagementConfigResource'];
          };
        };
      };
    };
  };
  '/api/v3/config/mediamanagement/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['MediaManagementConfigResource'];
            'application/json': components['schemas']['MediaManagementConfigResource'];
            'text/json': components['schemas']['MediaManagementConfigResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['MediaManagementConfigResource'];
            'application/json': components['schemas']['MediaManagementConfigResource'];
            'text/json': components['schemas']['MediaManagementConfigResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['MediaManagementConfigResource'];
          'text/json': components['schemas']['MediaManagementConfigResource'];
          'application/*+json': components['schemas']['MediaManagementConfigResource'];
        };
      };
    };
  };
  '/api/v3/metadata': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['MetadataResource'][];
            'application/json': components['schemas']['MetadataResource'][];
            'text/json': components['schemas']['MetadataResource'][];
          };
        };
      };
    };
    post: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['MetadataResource'];
            'application/json': components['schemas']['MetadataResource'];
            'text/json': components['schemas']['MetadataResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['MetadataResource'];
          'text/json': components['schemas']['MetadataResource'];
          'application/*+json': components['schemas']['MetadataResource'];
        };
      };
    };
  };
  '/api/v3/metadata/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['MetadataResource'];
            'application/json': components['schemas']['MetadataResource'];
            'text/json': components['schemas']['MetadataResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['MetadataResource'];
            'application/json': components['schemas']['MetadataResource'];
            'text/json': components['schemas']['MetadataResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['MetadataResource'];
          'text/json': components['schemas']['MetadataResource'];
          'application/*+json': components['schemas']['MetadataResource'];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/metadata/schema': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['MetadataResource'][];
            'application/json': components['schemas']['MetadataResource'][];
            'text/json': components['schemas']['MetadataResource'][];
          };
        };
      };
    };
  };
  '/api/v3/metadata/test': {
    post: {
      responses: {
        /** Success */
        200: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['MetadataResource'];
          'text/json': components['schemas']['MetadataResource'];
          'application/*+json': components['schemas']['MetadataResource'];
        };
      };
    };
  };
  '/api/v3/metadata/testall': {
    post: {
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/metadata/action/{name}': {
    post: {
      parameters: {
        path: {
          name: string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['MetadataResource'];
          'text/json': components['schemas']['MetadataResource'];
          'application/*+json': components['schemas']['MetadataResource'];
        };
      };
    };
  };
  '/api/v3/config/metadata': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['MetadataConfigResource'];
            'application/json': components['schemas']['MetadataConfigResource'];
            'text/json': components['schemas']['MetadataConfigResource'];
          };
        };
      };
    };
  };
  '/api/v3/config/metadata/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['MetadataConfigResource'];
            'application/json': components['schemas']['MetadataConfigResource'];
            'text/json': components['schemas']['MetadataConfigResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['MetadataConfigResource'];
            'application/json': components['schemas']['MetadataConfigResource'];
            'text/json': components['schemas']['MetadataConfigResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['MetadataConfigResource'];
          'text/json': components['schemas']['MetadataConfigResource'];
          'application/*+json': components['schemas']['MetadataConfigResource'];
        };
      };
    };
  };
  '/api/v3/movie': {
    get: {
      parameters: {
        query: {
          tmdbId?: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['MovieResource'][];
            'application/json': components['schemas']['MovieResource'][];
            'text/json': components['schemas']['MovieResource'][];
          };
        };
      };
    };
    post: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['MovieResource'];
            'application/json': components['schemas']['MovieResource'];
            'text/json': components['schemas']['MovieResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['MovieResource'];
          'text/json': components['schemas']['MovieResource'];
          'application/*+json': components['schemas']['MovieResource'];
        };
      };
    };
  };
  '/api/v3/movie/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['MovieResource'];
            'application/json': components['schemas']['MovieResource'];
            'text/json': components['schemas']['MovieResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['MovieResource'];
            'application/json': components['schemas']['MovieResource'];
            'text/json': components['schemas']['MovieResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['MovieResource'];
          'text/json': components['schemas']['MovieResource'];
          'application/*+json': components['schemas']['MovieResource'];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/movie/editor': {
    put: {
      responses: {
        /** Success */
        200: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['MovieEditorResource'];
          'text/json': components['schemas']['MovieEditorResource'];
          'application/*+json': components['schemas']['MovieEditorResource'];
        };
      };
    };
    delete: {
      responses: {
        /** Success */
        200: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['MovieEditorResource'];
          'text/json': components['schemas']['MovieEditorResource'];
          'application/*+json': components['schemas']['MovieEditorResource'];
        };
      };
    };
  };
  '/api/v3/moviefile': {
    get: {
      parameters: {
        query: {
          movieId?: number;
          movieFileIds?: number[];
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['MovieFileResource'][];
            'application/json': components['schemas']['MovieFileResource'][];
            'text/json': components['schemas']['MovieFileResource'][];
          };
        };
      };
    };
  };
  '/api/v3/moviefile/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['MovieFileResource'];
            'application/json': components['schemas']['MovieFileResource'];
            'text/json': components['schemas']['MovieFileResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['MovieFileResource'];
            'application/json': components['schemas']['MovieFileResource'];
            'text/json': components['schemas']['MovieFileResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['MovieFileResource'];
          'text/json': components['schemas']['MovieFileResource'];
          'application/*+json': components['schemas']['MovieFileResource'];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/moviefile/editor': {
    put: {
      responses: {
        /** Success */
        200: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['MovieFileListResource'];
          'text/json': components['schemas']['MovieFileListResource'];
          'application/*+json': components['schemas']['MovieFileListResource'];
        };
      };
    };
  };
  '/api/v3/moviefile/bulk': {
    delete: {
      responses: {
        /** Success */
        200: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['MovieFileListResource'];
          'text/json': components['schemas']['MovieFileListResource'];
          'application/*+json': components['schemas']['MovieFileListResource'];
        };
      };
    };
  };
  '/api/v3/movie/import': {
    post: {
      responses: {
        /** Success */
        200: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['MovieResource'][];
          'text/json': components['schemas']['MovieResource'][];
          'application/*+json': components['schemas']['MovieResource'][];
        };
      };
    };
  };
  '/api/v3/movie/import/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['MovieResource'];
            'application/json': components['schemas']['MovieResource'];
            'text/json': components['schemas']['MovieResource'];
          };
        };
      };
    };
  };
  '/api/v3/movie/lookup/tmdb': {
    get: {
      parameters: {
        query: {
          tmdbId?: number;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/movie/lookup/imdb': {
    get: {
      parameters: {
        query: {
          imdbId?: string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/movie/lookup': {
    get: {
      parameters: {
        query: {
          term?: string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/movie/lookup/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['MovieResource'];
            'application/json': components['schemas']['MovieResource'];
            'text/json': components['schemas']['MovieResource'];
          };
        };
      };
    };
  };
  '/api/v3/config/naming': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['NamingConfigResource'];
            'application/json': components['schemas']['NamingConfigResource'];
            'text/json': components['schemas']['NamingConfigResource'];
          };
        };
      };
    };
  };
  '/api/v3/config/naming/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['NamingConfigResource'];
            'application/json': components['schemas']['NamingConfigResource'];
            'text/json': components['schemas']['NamingConfigResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['NamingConfigResource'];
            'application/json': components['schemas']['NamingConfigResource'];
            'text/json': components['schemas']['NamingConfigResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['NamingConfigResource'];
          'text/json': components['schemas']['NamingConfigResource'];
          'application/*+json': components['schemas']['NamingConfigResource'];
        };
      };
    };
  };
  '/api/v3/config/naming/examples': {
    get: {
      parameters: {
        query: {
          RenameMovies?: boolean;
          ReplaceIllegalCharacters?: boolean;
          ColonReplacementFormat?: components['schemas']['ColonReplacementFormat'];
          StandardMovieFormat?: string;
          MovieFolderFormat?: string;
          IncludeQuality?: boolean;
          ReplaceSpaces?: boolean;
          Separator?: string;
          NumberStyle?: string;
          Id?: number;
          ResourceName?: string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/notification': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['NotificationResource'][];
            'application/json': components['schemas']['NotificationResource'][];
            'text/json': components['schemas']['NotificationResource'][];
          };
        };
      };
    };
    post: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['NotificationResource'];
            'application/json': components['schemas']['NotificationResource'];
            'text/json': components['schemas']['NotificationResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['NotificationResource'];
          'text/json': components['schemas']['NotificationResource'];
          'application/*+json': components['schemas']['NotificationResource'];
        };
      };
    };
  };
  '/api/v3/notification/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['NotificationResource'];
            'application/json': components['schemas']['NotificationResource'];
            'text/json': components['schemas']['NotificationResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['NotificationResource'];
            'application/json': components['schemas']['NotificationResource'];
            'text/json': components['schemas']['NotificationResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['NotificationResource'];
          'text/json': components['schemas']['NotificationResource'];
          'application/*+json': components['schemas']['NotificationResource'];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/notification/schema': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['NotificationResource'][];
            'application/json': components['schemas']['NotificationResource'][];
            'text/json': components['schemas']['NotificationResource'][];
          };
        };
      };
    };
  };
  '/api/v3/notification/test': {
    post: {
      responses: {
        /** Success */
        200: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['NotificationResource'];
          'text/json': components['schemas']['NotificationResource'];
          'application/*+json': components['schemas']['NotificationResource'];
        };
      };
    };
  };
  '/api/v3/notification/testall': {
    post: {
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/notification/action/{name}': {
    post: {
      parameters: {
        path: {
          name: string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['NotificationResource'];
          'text/json': components['schemas']['NotificationResource'];
          'application/*+json': components['schemas']['NotificationResource'];
        };
      };
    };
  };
  '/api/v3/parse': {
    get: {
      parameters: {
        query: {
          title?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['ParseResource'];
            'application/json': components['schemas']['ParseResource'];
            'text/json': components['schemas']['ParseResource'];
          };
        };
      };
    };
  };
  '/api/v3/qualitydefinition/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['QualityDefinitionResource'];
            'application/json': components['schemas']['QualityDefinitionResource'];
            'text/json': components['schemas']['QualityDefinitionResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['QualityDefinitionResource'];
            'application/json': components['schemas']['QualityDefinitionResource'];
            'text/json': components['schemas']['QualityDefinitionResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['QualityDefinitionResource'];
          'text/json': components['schemas']['QualityDefinitionResource'];
          'application/*+json': components['schemas']['QualityDefinitionResource'];
        };
      };
    };
  };
  '/api/v3/qualitydefinition': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['QualityDefinitionResource'][];
            'application/json': components['schemas']['QualityDefinitionResource'][];
            'text/json': components['schemas']['QualityDefinitionResource'][];
          };
        };
      };
    };
  };
  '/api/v3/qualitydefinition/update': {
    put: {
      responses: {
        /** Success */
        200: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['QualityDefinitionResource'][];
          'text/json': components['schemas']['QualityDefinitionResource'][];
          'application/*+json': components['schemas']['QualityDefinitionResource'][];
        };
      };
    };
  };
  '/api/v3/qualityprofile': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['QualityProfileResource'][];
            'application/json': components['schemas']['QualityProfileResource'][];
            'text/json': components['schemas']['QualityProfileResource'][];
          };
        };
      };
    };
    post: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['QualityProfileResource'];
            'application/json': components['schemas']['QualityProfileResource'];
            'text/json': components['schemas']['QualityProfileResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['QualityProfileResource'];
          'text/json': components['schemas']['QualityProfileResource'];
          'application/*+json': components['schemas']['QualityProfileResource'];
        };
      };
    };
  };
  '/api/v3/qualityprofile/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['QualityProfileResource'];
            'application/json': components['schemas']['QualityProfileResource'];
            'text/json': components['schemas']['QualityProfileResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['QualityProfileResource'];
            'application/json': components['schemas']['QualityProfileResource'];
            'text/json': components['schemas']['QualityProfileResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['QualityProfileResource'];
          'text/json': components['schemas']['QualityProfileResource'];
          'application/*+json': components['schemas']['QualityProfileResource'];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/qualityprofile/schema': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['QualityProfileResource'];
            'application/json': components['schemas']['QualityProfileResource'];
            'text/json': components['schemas']['QualityProfileResource'];
          };
        };
      };
    };
  };
  '/api/v3/queue/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['QueueResource'];
            'application/json': components['schemas']['QueueResource'];
            'text/json': components['schemas']['QueueResource'];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
        query: {
          removeFromClient?: boolean;
          blocklist?: boolean;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/queue/bulk': {
    delete: {
      parameters: {
        query: {
          removeFromClient?: boolean;
          blocklist?: boolean;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['QueueBulkResource'];
          'text/json': components['schemas']['QueueBulkResource'];
          'application/*+json': components['schemas']['QueueBulkResource'];
        };
      };
    };
  };
  '/api/v3/queue': {
    get: {
      parameters: {
        query: {
          includeUnknownMovieItems?: boolean;
          includeMovie?: boolean;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['QueueResourcePagingResource'];
            'application/json': components['schemas']['QueueResourcePagingResource'];
            'text/json': components['schemas']['QueueResourcePagingResource'];
          };
        };
      };
    };
  };
  '/api/v3/queue/grab/{id}': {
    post: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/queue/grab/bulk': {
    post: {
      responses: {
        /** Success */
        200: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['QueueBulkResource'];
          'text/json': components['schemas']['QueueBulkResource'];
          'application/*+json': components['schemas']['QueueBulkResource'];
        };
      };
    };
  };
  '/api/v3/queue/details': {
    get: {
      parameters: {
        query: {
          movieId?: number;
          includeMovie?: boolean;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['QueueResource'][];
            'application/json': components['schemas']['QueueResource'][];
            'text/json': components['schemas']['QueueResource'][];
          };
        };
      };
    };
  };
  '/api/v3/queue/details/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['QueueResource'];
            'application/json': components['schemas']['QueueResource'];
            'text/json': components['schemas']['QueueResource'];
          };
        };
      };
    };
  };
  '/api/v3/queue/status': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['QueueStatusResource'];
            'application/json': components['schemas']['QueueStatusResource'];
            'text/json': components['schemas']['QueueStatusResource'];
          };
        };
      };
    };
  };
  '/api/v3/queue/status/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['QueueStatusResource'];
            'application/json': components['schemas']['QueueStatusResource'];
            'text/json': components['schemas']['QueueStatusResource'];
          };
        };
      };
    };
  };
  '/api/v3/release': {
    get: {
      parameters: {
        query: {
          movieId?: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['ReleaseResource'][];
            'application/json': components['schemas']['ReleaseResource'][];
            'text/json': components['schemas']['ReleaseResource'][];
          };
        };
      };
    };
    post: {
      responses: {
        /** Success */
        200: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['ReleaseResource'];
          'text/json': components['schemas']['ReleaseResource'];
          'application/*+json': components['schemas']['ReleaseResource'];
        };
      };
    };
  };
  '/api/v3/release/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['ReleaseResource'];
            'application/json': components['schemas']['ReleaseResource'];
            'text/json': components['schemas']['ReleaseResource'];
          };
        };
      };
    };
  };
  '/api/v3/release/push': {
    post: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['ReleaseResource'][];
            'application/json': components['schemas']['ReleaseResource'][];
            'text/json': components['schemas']['ReleaseResource'][];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['ReleaseResource'];
          'text/json': components['schemas']['ReleaseResource'];
          'application/*+json': components['schemas']['ReleaseResource'];
        };
      };
    };
  };
  '/api/v3/release/push/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['ReleaseResource'];
            'application/json': components['schemas']['ReleaseResource'];
            'text/json': components['schemas']['ReleaseResource'];
          };
        };
      };
    };
  };
  '/api/v3/remotepathmapping': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['RemotePathMappingResource'][];
            'application/json': components['schemas']['RemotePathMappingResource'][];
            'text/json': components['schemas']['RemotePathMappingResource'][];
          };
        };
      };
    };
    post: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['RemotePathMappingResource'];
            'application/json': components['schemas']['RemotePathMappingResource'];
            'text/json': components['schemas']['RemotePathMappingResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['RemotePathMappingResource'];
          'text/json': components['schemas']['RemotePathMappingResource'];
          'application/*+json': components['schemas']['RemotePathMappingResource'];
        };
      };
    };
  };
  '/api/v3/remotepathmapping/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['RemotePathMappingResource'];
            'application/json': components['schemas']['RemotePathMappingResource'];
            'text/json': components['schemas']['RemotePathMappingResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['RemotePathMappingResource'];
            'application/json': components['schemas']['RemotePathMappingResource'];
            'text/json': components['schemas']['RemotePathMappingResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['RemotePathMappingResource'];
          'text/json': components['schemas']['RemotePathMappingResource'];
          'application/*+json': components['schemas']['RemotePathMappingResource'];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/rename': {
    get: {
      parameters: {
        query: {
          movieId?: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['RenameMovieResource'][];
            'application/json': components['schemas']['RenameMovieResource'][];
            'text/json': components['schemas']['RenameMovieResource'][];
          };
        };
      };
    };
  };
  '/api/v3/restriction': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['RestrictionResource'][];
            'application/json': components['schemas']['RestrictionResource'][];
            'text/json': components['schemas']['RestrictionResource'][];
          };
        };
      };
    };
    post: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['RestrictionResource'];
            'application/json': components['schemas']['RestrictionResource'];
            'text/json': components['schemas']['RestrictionResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['RestrictionResource'];
          'text/json': components['schemas']['RestrictionResource'];
          'application/*+json': components['schemas']['RestrictionResource'];
        };
      };
    };
  };
  '/api/v3/restriction/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['RestrictionResource'];
            'application/json': components['schemas']['RestrictionResource'];
            'text/json': components['schemas']['RestrictionResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['RestrictionResource'];
            'application/json': components['schemas']['RestrictionResource'];
            'text/json': components['schemas']['RestrictionResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['RestrictionResource'];
          'text/json': components['schemas']['RestrictionResource'];
          'application/*+json': components['schemas']['RestrictionResource'];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/rootfolder': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['RootFolderResource'][];
            'application/json': components['schemas']['RootFolderResource'][];
            'text/json': components['schemas']['RootFolderResource'][];
          };
        };
      };
    };
    post: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['RootFolderResource'];
            'application/json': components['schemas']['RootFolderResource'];
            'text/json': components['schemas']['RootFolderResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['RootFolderResource'];
          'text/json': components['schemas']['RootFolderResource'];
          'application/*+json': components['schemas']['RootFolderResource'];
        };
      };
    };
  };
  '/api/v3/rootfolder/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['RootFolderResource'];
            'application/json': components['schemas']['RootFolderResource'];
            'text/json': components['schemas']['RootFolderResource'];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/content/{path}': {
    get: {
      parameters: {
        path: {
          path: string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/': {
    get: {
      parameters: {
        path: {
          path: string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/{path}': {
    get: {
      parameters: {
        path: {
          path: string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/system/status': {
    get: {
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/system/routes': {
    get: {
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/system/routes/duplicate': {
    get: {
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/system/shutdown': {
    post: {
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/system/restart': {
    post: {
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/tag': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['TagResource'][];
            'application/json': components['schemas']['TagResource'][];
            'text/json': components['schemas']['TagResource'][];
          };
        };
      };
    };
    post: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['TagResource'];
            'application/json': components['schemas']['TagResource'];
            'text/json': components['schemas']['TagResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['TagResource'];
          'text/json': components['schemas']['TagResource'];
          'application/*+json': components['schemas']['TagResource'];
        };
      };
    };
  };
  '/api/v3/tag/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['TagResource'];
            'application/json': components['schemas']['TagResource'];
            'text/json': components['schemas']['TagResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['TagResource'];
            'application/json': components['schemas']['TagResource'];
            'text/json': components['schemas']['TagResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['TagResource'];
          'text/json': components['schemas']['TagResource'];
          'application/*+json': components['schemas']['TagResource'];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/v3/tag/detail': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['TagDetailsResource'][];
            'application/json': components['schemas']['TagDetailsResource'][];
            'text/json': components['schemas']['TagDetailsResource'][];
          };
        };
      };
    };
  };
  '/api/v3/tag/detail/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['TagDetailsResource'];
            'application/json': components['schemas']['TagDetailsResource'];
            'text/json': components['schemas']['TagDetailsResource'];
          };
        };
      };
    };
  };
  '/api/v3/system/task': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['TaskResource'][];
            'application/json': components['schemas']['TaskResource'][];
            'text/json': components['schemas']['TaskResource'][];
          };
        };
      };
    };
  };
  '/api/v3/system/task/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['TaskResource'];
            'application/json': components['schemas']['TaskResource'];
            'text/json': components['schemas']['TaskResource'];
          };
        };
      };
    };
  };
  '/api/v3/config/ui': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['UiConfigResource'];
            'application/json': components['schemas']['UiConfigResource'];
            'text/json': components['schemas']['UiConfigResource'];
          };
        };
      };
    };
  };
  '/api/v3/config/ui/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['UiConfigResource'];
            'application/json': components['schemas']['UiConfigResource'];
            'text/json': components['schemas']['UiConfigResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['UiConfigResource'];
            'application/json': components['schemas']['UiConfigResource'];
            'text/json': components['schemas']['UiConfigResource'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['UiConfigResource'];
          'text/json': components['schemas']['UiConfigResource'];
          'application/*+json': components['schemas']['UiConfigResource'];
        };
      };
    };
  };
  '/api/v3/update': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['UpdateResource'][];
            'application/json': components['schemas']['UpdateResource'][];
            'text/json': components['schemas']['UpdateResource'][];
          };
        };
      };
    };
  };
  '/api/v3/log/file/update': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['LogFileResource'][];
            'application/json': components['schemas']['LogFileResource'][];
            'text/json': components['schemas']['LogFileResource'][];
          };
        };
      };
    };
  };
  '/api/v3/log/file/update/{filename}': {
    get: {
      parameters: {
        path: {
          filename: string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
}

export interface components {
  schemas: {
    /** @enum {string} */
    AddMovieMethod: 'manual' | 'list' | 'collection';
    AddMovieOptions: {
      ignoreEpisodesWithFiles?: boolean;
      ignoreEpisodesWithoutFiles?: boolean;
      monitor?: components['schemas']['MonitorTypes'];
      searchForMovie?: boolean;
      addMethod?: components['schemas']['AddMovieMethod'];
    };
    AlternativeTitle: {
      /** Format: int32 */
      id?: number;
      sourceType?: components['schemas']['SourceType'];
      /** Format: int32 */
      movieMetadataId?: number;
      title?: string | null;
      cleanTitle?: string | null;
      /** Format: int32 */
      sourceId?: number;
      /** Format: int32 */
      votes?: number;
      /** Format: int32 */
      voteCount?: number;
      language?: components['schemas']['Language'];
    };
    AlternativeTitleResource: {
      /** Format: int32 */
      id?: number;
      sourceType?: components['schemas']['SourceType'];
      /** Format: int32 */
      movieMetadataId?: number;
      title?: string | null;
      cleanTitle?: string | null;
      /** Format: int32 */
      sourceId?: number;
      /** Format: int32 */
      votes?: number;
      /** Format: int32 */
      voteCount?: number;
      language?: components['schemas']['Language'];
    };
    /** @enum {string} */
    ApplyTags: 'add' | 'remove' | 'replace';
    /** @enum {string} */
    AuthenticationType: 'none' | 'basic' | 'forms';
    BackupResource: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      path?: string | null;
      type?: components['schemas']['BackupType'];
      /** Format: int64 */
      size?: number;
      /** Format: date-time */
      time?: string;
    };
    /** @enum {string} */
    BackupType: 'scheduled' | 'manual' | 'update';
    BlocklistBulkResource: {
      ids?: number[] | null;
    };
    BlocklistResource: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      movieId?: number;
      sourceTitle?: string | null;
      languages?: components['schemas']['Language'][] | null;
      quality?: components['schemas']['QualityModel'];
      customFormats?: components['schemas']['CustomFormatResource'][] | null;
      /** Format: date-time */
      date?: string;
      protocol?: components['schemas']['DownloadProtocol'];
      indexer?: string | null;
      message?: string | null;
      movie?: components['schemas']['MovieResource'];
    };
    BlocklistResourcePagingResource: {
      /** Format: int32 */
      page?: number;
      /** Format: int32 */
      pageSize?: number;
      sortKey?: string | null;
      sortDirection?: components['schemas']['SortDirection'];
      filters?: components['schemas']['PagingResourceFilter'][] | null;
      /** Format: int32 */
      totalRecords?: number;
      records?: components['schemas']['BlocklistResource'][] | null;
    };
    /** @enum {string} */
    CertificateValidationType: 'enabled' | 'disabledForLocalAddresses' | 'disabled';
    CollectionMovieResource: {
      /** Format: int32 */
      tmdbId?: number;
      imdbId?: string | null;
      title?: string | null;
      cleanTitle?: string | null;
      sortTitle?: string | null;
      overview?: string | null;
      /** Format: int32 */
      runtime?: number;
      images?: components['schemas']['MediaCover'][] | null;
      /** Format: int32 */
      year?: number;
      ratings?: components['schemas']['Ratings'];
      genres?: string[] | null;
      folder?: string | null;
    };
    CollectionResource: {
      /** Format: int32 */
      id?: number;
      title?: string | null;
      sortTitle?: string | null;
      /** Format: int32 */
      tmdbId?: number;
      images?: components['schemas']['MediaCover'][] | null;
      overview?: string | null;
      monitored?: boolean;
      rootFolderPath?: string | null;
      /** Format: int32 */
      qualityProfileId?: number;
      searchOnAdd?: boolean;
      minimumAvailability?: components['schemas']['MovieStatusType'];
      movies?: components['schemas']['CollectionMovieResource'][] | null;
    };
    CollectionUpdateResource: {
      collectionIds?: number[] | null;
      monitored?: boolean | null;
      monitorMovies?: boolean | null;
      /** Format: int32 */
      qualityProfileId?: number | null;
      rootFolderPath?: string | null;
      minimumAvailability?: components['schemas']['MovieStatusType'];
    };
    /** @enum {string} */
    ColonReplacementFormat: 'delete' | 'dash' | 'spaceDash' | 'spaceDashSpace';
    Command: {
      sendUpdatesToClient?: boolean;
      updateScheduledTask?: boolean;
      completionMessage?: string | null;
      requiresDiskAccess?: boolean;
      isExclusive?: boolean;
      isTypeExclusive?: boolean;
      name?: string | null;
      /** Format: date-time */
      lastExecutionTime?: string | null;
      /** Format: date-time */
      lastStartTime?: string | null;
      trigger?: components['schemas']['CommandTrigger'];
      suppressMessages?: boolean;
      clientUserAgent?: string | null;
    };
    /** @enum {string} */
    CommandPriority: 'normal' | 'high' | 'low';
    CommandResource: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      commandName?: string | null;
      message?: string | null;
      body?: components['schemas']['Command'];
      priority?: components['schemas']['CommandPriority'];
      status?: components['schemas']['CommandStatus'];
      /** Format: date-time */
      queued?: string;
      /** Format: date-time */
      started?: string | null;
      /** Format: date-time */
      ended?: string | null;
      duration?: components['schemas']['TimeSpan'];
      exception?: string | null;
      trigger?: components['schemas']['CommandTrigger'];
      clientUserAgent?: string | null;
      /** Format: date-time */
      stateChangeTime?: string | null;
      sendUpdatesToClient?: boolean;
      updateScheduledTask?: boolean;
      /** Format: date-time */
      lastExecutionTime?: string | null;
    };
    /** @enum {string} */
    CommandStatus:
      | 'queued'
      | 'started'
      | 'completed'
      | 'failed'
      | 'aborted'
      | 'cancelled'
      | 'orphaned';
    /** @enum {string} */
    CommandTrigger: 'unspecified' | 'manual' | 'scheduled';
    CreditResource: {
      /** Format: int32 */
      id?: number;
      personName?: string | null;
      creditTmdbId?: string | null;
      /** Format: int32 */
      personTmdbId?: number;
      /** Format: int32 */
      movieMetadataId?: number;
      images?: components['schemas']['MediaCover'][] | null;
      department?: string | null;
      job?: string | null;
      character?: string | null;
      /** Format: int32 */
      order?: number;
      type?: components['schemas']['CreditType'];
    };
    /** @enum {string} */
    CreditType: 'cast' | 'crew';
    CustomFilterResource: {
      /** Format: int32 */
      id?: number;
      type?: string | null;
      label?: string | null;
      filters?: { [key: string]: unknown }[] | null;
    };
    CustomFormatResource: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      includeCustomFormatWhenRenaming?: boolean;
      specifications?: components['schemas']['CustomFormatSpecificationSchema'][] | null;
    };
    CustomFormatSpecificationSchema: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      implementation?: string | null;
      implementationName?: string | null;
      infoLink?: string | null;
      negate?: boolean;
      required?: boolean;
      fields?: components['schemas']['Field'][] | null;
      presets?: components['schemas']['CustomFormatSpecificationSchema'][] | null;
    };
    DelayProfileResource: {
      /** Format: int32 */
      id?: number;
      enableUsenet?: boolean;
      enableTorrent?: boolean;
      preferredProtocol?: components['schemas']['DownloadProtocol'];
      /** Format: int32 */
      usenetDelay?: number;
      /** Format: int32 */
      torrentDelay?: number;
      bypassIfHighestQuality?: boolean;
      /** Format: int32 */
      order?: number;
      tags?: number[] | null;
    };
    DiskSpaceResource: {
      /** Format: int32 */
      id?: number;
      path?: string | null;
      label?: string | null;
      /** Format: int64 */
      freeSpace?: number;
      /** Format: int64 */
      totalSpace?: number;
    };
    DownloadClientConfigResource: {
      /** Format: int32 */
      id?: number;
      downloadClientWorkingFolders?: string | null;
      enableCompletedDownloadHandling?: boolean;
      /** Format: int32 */
      checkForFinishedDownloadInterval?: number;
      autoRedownloadFailed?: boolean;
    };
    DownloadClientResource: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      fields?: components['schemas']['Field'][] | null;
      implementationName?: string | null;
      implementation?: string | null;
      configContract?: string | null;
      infoLink?: string | null;
      message?: components['schemas']['ProviderMessage'];
      tags?: number[] | null;
      presets?: components['schemas']['DownloadClientResource'][] | null;
      enable?: boolean;
      protocol?: components['schemas']['DownloadProtocol'];
      /** Format: int32 */
      priority?: number;
      removeCompletedDownloads?: boolean;
      removeFailedDownloads?: boolean;
    };
    /** @enum {string} */
    DownloadProtocol: 'unknown' | 'usenet' | 'torrent';
    ExtraFileResource: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      movieId?: number;
      /** Format: int32 */
      movieFileId?: number | null;
      relativePath?: string | null;
      extension?: string | null;
      type?: components['schemas']['ExtraFileType'];
    };
    /** @enum {string} */
    ExtraFileType: 'subtitle' | 'metadata' | 'other';
    Field: {
      /** Format: int32 */
      order?: number;
      name?: string | null;
      label?: string | null;
      unit?: string | null;
      helpText?: string | null;
      helpLink?: string | null;
      value?: unknown | null;
      type?: string | null;
      advanced?: boolean;
      selectOptions?: components['schemas']['SelectOption'][] | null;
      selectOptionsProviderAction?: string | null;
      section?: string | null;
      hidden?: string | null;
      placeholder?: string | null;
    };
    /** @enum {string} */
    FileDateType: 'none' | 'cinemas' | 'release';
    /** @enum {string} */
    HealthCheckResult: 'ok' | 'notice' | 'warning' | 'error';
    HealthResource: {
      /** Format: int32 */
      id?: number;
      source?: string | null;
      type?: components['schemas']['HealthCheckResult'];
      message?: string | null;
      wikiUrl?: components['schemas']['HttpUri'];
    };
    HistoryResource: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      movieId?: number;
      sourceTitle?: string | null;
      languages?: components['schemas']['Language'][] | null;
      quality?: components['schemas']['QualityModel'];
      customFormats?: components['schemas']['CustomFormatResource'][] | null;
      qualityCutoffNotMet?: boolean;
      /** Format: date-time */
      date?: string;
      downloadId?: string | null;
      eventType?: components['schemas']['MovieHistoryEventType'];
      data?: { [key: string]: string | null } | null;
      movie?: components['schemas']['MovieResource'];
    };
    HistoryResourcePagingResource: {
      /** Format: int32 */
      page?: number;
      /** Format: int32 */
      pageSize?: number;
      sortKey?: string | null;
      sortDirection?: components['schemas']['SortDirection'];
      filters?: components['schemas']['PagingResourceFilter'][] | null;
      /** Format: int32 */
      totalRecords?: number;
      records?: components['schemas']['HistoryResource'][] | null;
    };
    HostConfigResource: {
      /** Format: int32 */
      id?: number;
      bindAddress?: string | null;
      /** Format: int32 */
      port?: number;
      /** Format: int32 */
      sslPort?: number;
      enableSsl?: boolean;
      launchBrowser?: boolean;
      authenticationMethod?: components['schemas']['AuthenticationType'];
      analyticsEnabled?: boolean;
      username?: string | null;
      password?: string | null;
      logLevel?: string | null;
      consoleLogLevel?: string | null;
      branch?: string | null;
      apiKey?: string | null;
      sslCertPath?: string | null;
      sslCertPassword?: string | null;
      urlBase?: string | null;
      instanceName?: string | null;
      applicationUrl?: string | null;
      updateAutomatically?: boolean;
      updateMechanism?: components['schemas']['UpdateMechanism'];
      updateScriptPath?: string | null;
      proxyEnabled?: boolean;
      proxyType?: components['schemas']['ProxyType'];
      proxyHostname?: string | null;
      /** Format: int32 */
      proxyPort?: number;
      proxyUsername?: string | null;
      proxyPassword?: string | null;
      proxyBypassFilter?: string | null;
      proxyBypassLocalAddresses?: boolean;
      certificateValidation?: components['schemas']['CertificateValidationType'];
      backupFolder?: string | null;
      /** Format: int32 */
      backupInterval?: number;
      /** Format: int32 */
      backupRetention?: number;
    };
    HttpUri: {
      fullUri?: string | null;
      scheme?: string | null;
      host?: string | null;
      /** Format: int32 */
      port?: number | null;
      path?: string | null;
      query?: string | null;
      fragment?: string | null;
    };
    ImportExclusionsResource: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      fields?: components['schemas']['Field'][] | null;
      implementationName?: string | null;
      implementation?: string | null;
      configContract?: string | null;
      infoLink?: string | null;
      message?: components['schemas']['ProviderMessage'];
      tags?: number[] | null;
      presets?: components['schemas']['ImportExclusionsResource'][] | null;
      /** Format: int32 */
      tmdbId?: number;
      movieTitle?: string | null;
      /** Format: int32 */
      movieYear?: number;
    };
    ImportListConfigResource: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      importListSyncInterval?: number;
      listSyncLevel?: string | null;
      importExclusions?: string | null;
    };
    ImportListResource: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      fields?: components['schemas']['Field'][] | null;
      implementationName?: string | null;
      implementation?: string | null;
      configContract?: string | null;
      infoLink?: string | null;
      message?: components['schemas']['ProviderMessage'];
      tags?: number[] | null;
      presets?: components['schemas']['ImportListResource'][] | null;
      enabled?: boolean;
      enableAuto?: boolean;
      monitor?: components['schemas']['MonitorTypes'];
      rootFolderPath?: string | null;
      /** Format: int32 */
      qualityProfileId?: number;
      searchOnAdd?: boolean;
      minimumAvailability?: components['schemas']['MovieStatusType'];
      listType?: components['schemas']['ImportListType'];
      /** Format: int32 */
      listOrder?: number;
    };
    /** @enum {string} */
    ImportListType: 'program' | 'tmdb' | 'trakt' | 'plex' | 'other' | 'advanced';
    IndexerConfigResource: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      minimumAge?: number;
      /** Format: int32 */
      maximumSize?: number;
      /** Format: int32 */
      retention?: number;
      /** Format: int32 */
      rssSyncInterval?: number;
      preferIndexerFlags?: boolean;
      /** Format: int32 */
      availabilityDelay?: number;
      allowHardcodedSubs?: boolean;
      whitelistedHardcodedSubs?: string | null;
    };
    IndexerFlagResource: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      nameLower?: string | null;
    };
    IndexerResource: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      fields?: components['schemas']['Field'][] | null;
      implementationName?: string | null;
      implementation?: string | null;
      configContract?: string | null;
      infoLink?: string | null;
      message?: components['schemas']['ProviderMessage'];
      tags?: number[] | null;
      presets?: components['schemas']['IndexerResource'][] | null;
      enableRss?: boolean;
      enableAutomaticSearch?: boolean;
      enableInteractiveSearch?: boolean;
      supportsRss?: boolean;
      supportsSearch?: boolean;
      protocol?: components['schemas']['DownloadProtocol'];
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      downloadClientId?: number;
    };
    Language: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
    };
    LanguageResource: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      nameLower?: string | null;
    };
    LogFileResource: {
      /** Format: int32 */
      id?: number;
      filename?: string | null;
      /** Format: date-time */
      lastWriteTime?: string;
      contentsUrl?: string | null;
      downloadUrl?: string | null;
    };
    LogResource: {
      /** Format: int32 */
      id?: number;
      /** Format: date-time */
      time?: string;
      exception?: string | null;
      exceptionType?: string | null;
      level?: string | null;
      logger?: string | null;
      message?: string | null;
      method?: string | null;
    };
    LogResourcePagingResource: {
      /** Format: int32 */
      page?: number;
      /** Format: int32 */
      pageSize?: number;
      sortKey?: string | null;
      sortDirection?: components['schemas']['SortDirection'];
      filters?: components['schemas']['PagingResourceFilter'][] | null;
      /** Format: int32 */
      totalRecords?: number;
      records?: components['schemas']['LogResource'][] | null;
    };
    ManualImportReprocessResource: {
      /** Format: int32 */
      id?: number;
      path?: string | null;
      /** Format: int32 */
      movieId?: number;
      movie?: components['schemas']['MovieResource'];
      quality?: components['schemas']['QualityModel'];
      languages?: components['schemas']['Language'][] | null;
      releaseGroup?: string | null;
      downloadId?: string | null;
      rejections?: components['schemas']['Rejection'][] | null;
    };
    ManualImportResource: {
      /** Format: int32 */
      id?: number;
      path?: string | null;
      relativePath?: string | null;
      folderName?: string | null;
      name?: string | null;
      /** Format: int64 */
      size?: number;
      movie?: components['schemas']['MovieResource'];
      quality?: components['schemas']['QualityModel'];
      languages?: components['schemas']['Language'][] | null;
      releaseGroup?: string | null;
      /** Format: int32 */
      qualityWeight?: number;
      downloadId?: string | null;
      rejections?: components['schemas']['Rejection'][] | null;
    };
    MediaCover: {
      coverType?: components['schemas']['MediaCoverTypes'];
      url?: string | null;
      remoteUrl?: string | null;
    };
    /** @enum {string} */
    MediaCoverTypes: 'unknown' | 'poster' | 'banner' | 'fanart' | 'screenshot' | 'headshot';
    MediaInfoResource: {
      /** Format: int32 */
      id?: number;
      /** Format: int64 */
      audioBitrate?: number;
      /** Format: double */
      audioChannels?: number;
      audioCodec?: string | null;
      audioLanguages?: string | null;
      /** Format: int32 */
      audioStreamCount?: number;
      /** Format: int32 */
      videoBitDepth?: number;
      /** Format: int64 */
      videoBitrate?: number;
      videoCodec?: string | null;
      videoDynamicRangeType?: string | null;
      /** Format: double */
      videoFps?: number;
      resolution?: string | null;
      runTime?: string | null;
      scanType?: string | null;
      subtitles?: string | null;
    };
    MediaManagementConfigResource: {
      /** Format: int32 */
      id?: number;
      autoUnmonitorPreviouslyDownloadedMovies?: boolean;
      recycleBin?: string | null;
      /** Format: int32 */
      recycleBinCleanupDays?: number;
      downloadPropersAndRepacks?: components['schemas']['ProperDownloadTypes'];
      createEmptyMovieFolders?: boolean;
      deleteEmptyFolders?: boolean;
      fileDate?: components['schemas']['FileDateType'];
      rescanAfterRefresh?: components['schemas']['RescanAfterRefreshType'];
      autoRenameFolders?: boolean;
      pathsDefaultStatic?: boolean;
      setPermissionsLinux?: boolean;
      chmodFolder?: string | null;
      chownGroup?: string | null;
      skipFreeSpaceCheckWhenImporting?: boolean;
      /** Format: int32 */
      minimumFreeSpaceWhenImporting?: number;
      copyUsingHardlinks?: boolean;
      importExtraFiles?: boolean;
      extraFileExtensions?: string | null;
      enableMediaInfo?: boolean;
    };
    MetadataConfigResource: {
      /** Format: int32 */
      id?: number;
      certificationCountry?: components['schemas']['TMDbCountryCode'];
    };
    MetadataResource: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      fields?: components['schemas']['Field'][] | null;
      implementationName?: string | null;
      implementation?: string | null;
      configContract?: string | null;
      infoLink?: string | null;
      message?: components['schemas']['ProviderMessage'];
      tags?: number[] | null;
      presets?: components['schemas']['MetadataResource'][] | null;
      enable?: boolean;
    };
    /** @enum {string} */
    Modifier: 'none' | 'regional' | 'screener' | 'rawhd' | 'brdisk' | 'remux';
    /** @enum {string} */
    MonitorTypes: 'movieOnly' | 'movieAndCollection' | 'none';
    MovieCollection: {
      /** Format: int32 */
      id?: number;
      title?: string | null;
      cleanTitle?: string | null;
      sortTitle?: string | null;
      /** Format: int32 */
      tmdbId?: number;
      overview?: string | null;
      monitored?: boolean;
      /** Format: int32 */
      qualityProfileId?: number;
      rootFolderPath?: string | null;
      searchOnAdd?: boolean;
      minimumAvailability?: components['schemas']['MovieStatusType'];
      /** Format: date-time */
      lastInfoSync?: string | null;
      images?: components['schemas']['MediaCover'][] | null;
      /** Format: date-time */
      added?: string;
      movies?: components['schemas']['MovieMetadata'][] | null;
    };
    MovieEditorResource: {
      movieIds?: number[] | null;
      monitored?: boolean | null;
      /** Format: int32 */
      qualityProfileId?: number | null;
      minimumAvailability?: components['schemas']['MovieStatusType'];
      rootFolderPath?: string | null;
      tags?: number[] | null;
      applyTags?: components['schemas']['ApplyTags'];
      moveFiles?: boolean;
      deleteFiles?: boolean;
      addImportExclusion?: boolean;
    };
    MovieFileListResource: {
      movieFileIds?: number[] | null;
      languages?: components['schemas']['Language'][] | null;
      quality?: components['schemas']['QualityModel'];
      edition?: string | null;
      releaseGroup?: string | null;
      sceneName?: string | null;
      /** Format: int32 */
      indexerFlags?: number | null;
    };
    MovieFileResource: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      movieId?: number;
      relativePath?: string | null;
      path?: string | null;
      /** Format: int64 */
      size?: number;
      /** Format: date-time */
      dateAdded?: string;
      sceneName?: string | null;
      /** Format: int32 */
      indexerFlags?: number;
      quality?: components['schemas']['QualityModel'];
      customFormats?: components['schemas']['CustomFormatResource'][] | null;
      mediaInfo?: components['schemas']['MediaInfoResource'];
      originalFilePath?: string | null;
      qualityCutoffNotMet?: boolean;
      languages?: components['schemas']['Language'][] | null;
      releaseGroup?: string | null;
      edition?: string | null;
    };
    /** @enum {string} */
    MovieHistoryEventType:
      | 'unknown'
      | 'grabbed'
      | 'downloadFolderImported'
      | 'downloadFailed'
      | 'movieFileDeleted'
      | 'movieFolderImported'
      | 'movieFileRenamed'
      | 'downloadIgnored';
    MovieMetadata: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      tmdbId?: number;
      images?: components['schemas']['MediaCover'][] | null;
      genres?: string[] | null;
      /** Format: date-time */
      inCinemas?: string | null;
      /** Format: date-time */
      physicalRelease?: string | null;
      /** Format: date-time */
      digitalRelease?: string | null;
      certification?: string | null;
      /** Format: int32 */
      year?: number;
      ratings?: components['schemas']['Ratings'];
      /** Format: int32 */
      collectionTmdbId?: number;
      collectionTitle?: string | null;
      /** Format: date-time */
      lastInfoSync?: string | null;
      /** Format: int32 */
      runtime?: number;
      website?: string | null;
      imdbId?: string | null;
      title?: string | null;
      cleanTitle?: string | null;
      sortTitle?: string | null;
      status?: components['schemas']['MovieStatusType'];
      overview?: string | null;
      alternativeTitles?: components['schemas']['AlternativeTitle'][] | null;
      translations?: components['schemas']['MovieTranslation'][] | null;
      /** Format: int32 */
      secondaryYear?: number | null;
      youTubeTrailerId?: string | null;
      studio?: string | null;
      originalTitle?: string | null;
      cleanOriginalTitle?: string | null;
      originalLanguage?: components['schemas']['Language'];
      recommendations?: number[] | null;
      /** Format: float */
      popularity?: number;
      isRecentMovie?: boolean;
    };
    MovieResource: {
      /** Format: int32 */
      id?: number;
      title?: string | null;
      originalTitle?: string | null;
      originalLanguage?: components['schemas']['Language'];
      alternateTitles?: components['schemas']['AlternativeTitleResource'][] | null;
      /** Format: int32 */
      secondaryYear?: number | null;
      /** Format: int32 */
      secondaryYearSourceId?: number;
      sortTitle?: string | null;
      /** Format: int64 */
      sizeOnDisk?: number | null;
      status?: components['schemas']['MovieStatusType'];
      overview?: string | null;
      /** Format: date-time */
      inCinemas?: string | null;
      /** Format: date-time */
      physicalRelease?: string | null;
      /** Format: date-time */
      digitalRelease?: string | null;
      physicalReleaseNote?: string | null;
      images?: components['schemas']['MediaCover'][] | null;
      website?: string | null;
      remotePoster?: string | null;
      /** Format: int32 */
      year?: number;
      hasFile?: boolean;
      youTubeTrailerId?: string | null;
      studio?: string | null;
      path?: string | null;
      /** Format: int32 */
      qualityProfileId?: number;
      monitored?: boolean;
      minimumAvailability?: components['schemas']['MovieStatusType'];
      isAvailable?: boolean;
      folderName?: string | null;
      /** Format: int32 */
      runtime?: number;
      cleanTitle?: string | null;
      imdbId?: string | null;
      /** Format: int32 */
      tmdbId?: number;
      titleSlug?: string | null;
      rootFolderPath?: string | null;
      folder?: string | null;
      certification?: string | null;
      genres?: string[] | null;
      tags?: number[] | null;
      /** Format: date-time */
      added?: string;
      addOptions?: components['schemas']['AddMovieOptions'];
      ratings?: components['schemas']['Ratings'];
      movieFile?: components['schemas']['MovieFileResource'];
      collection?: components['schemas']['MovieCollection'];
      /** Format: float */
      popularity?: number;
    };
    /** @enum {string} */
    MovieRuntimeFormatType: 'hoursMinutes' | 'minutes';
    /** @enum {string} */
    MovieStatusType: 'tba' | 'announced' | 'inCinemas' | 'released' | 'deleted';
    MovieTranslation: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      movieMetadataId?: number;
      title?: string | null;
      cleanTitle?: string | null;
      overview?: string | null;
      language?: components['schemas']['Language'];
    };
    NamingConfigResource: {
      /** Format: int32 */
      id?: number;
      renameMovies?: boolean;
      replaceIllegalCharacters?: boolean;
      colonReplacementFormat?: components['schemas']['ColonReplacementFormat'];
      standardMovieFormat?: string | null;
      movieFolderFormat?: string | null;
      includeQuality?: boolean;
      replaceSpaces?: boolean;
      separator?: string | null;
      numberStyle?: string | null;
    };
    NotificationResource: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      fields?: components['schemas']['Field'][] | null;
      implementationName?: string | null;
      implementation?: string | null;
      configContract?: string | null;
      infoLink?: string | null;
      message?: components['schemas']['ProviderMessage'];
      tags?: number[] | null;
      presets?: components['schemas']['NotificationResource'][] | null;
      link?: string | null;
      onGrab?: boolean;
      onDownload?: boolean;
      onUpgrade?: boolean;
      onRename?: boolean;
      onMovieAdded?: boolean;
      onMovieDelete?: boolean;
      onMovieFileDelete?: boolean;
      onMovieFileDeleteForUpgrade?: boolean;
      onHealthIssue?: boolean;
      onApplicationUpdate?: boolean;
      supportsOnGrab?: boolean;
      supportsOnDownload?: boolean;
      supportsOnUpgrade?: boolean;
      supportsOnRename?: boolean;
      supportsOnMovieAdded?: boolean;
      supportsOnMovieDelete?: boolean;
      supportsOnMovieFileDelete?: boolean;
      supportsOnMovieFileDeleteForUpgrade?: boolean;
      supportsOnHealthIssue?: boolean;
      supportsOnApplicationUpdate?: boolean;
      includeHealthWarnings?: boolean;
      testCommand?: string | null;
    };
    PagingResourceFilter: {
      key?: string | null;
      value?: string | null;
    };
    ParseResource: {
      /** Format: int32 */
      id?: number;
      title?: string | null;
      parsedMovieInfo?: components['schemas']['ParsedMovieInfo'];
      movie?: components['schemas']['MovieResource'];
    };
    ParsedMovieInfo: {
      movieTitles?: string[] | null;
      originalTitle?: string | null;
      releaseTitle?: string | null;
      simpleReleaseTitle?: string | null;
      quality?: components['schemas']['QualityModel'];
      languages?: components['schemas']['Language'][] | null;
      releaseGroup?: string | null;
      releaseHash?: string | null;
      edition?: string | null;
      /** Format: int32 */
      year?: number;
      imdbId?: string | null;
      /** Format: int32 */
      tmdbId?: number;
      extraInfo?: { [key: string]: unknown | null } | null;
      movieTitle?: string | null;
      primaryMovieTitle?: string | null;
    };
    ProfileFormatItemResource: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      format?: number;
      name?: string | null;
      /** Format: int32 */
      score?: number;
    };
    /** @enum {string} */
    ProperDownloadTypes: 'preferAndUpgrade' | 'doNotUpgrade' | 'doNotPrefer';
    ProviderMessage: {
      message?: string | null;
      type?: components['schemas']['ProviderMessageType'];
    };
    /** @enum {string} */
    ProviderMessageType: 'info' | 'warning' | 'error';
    /** @enum {string} */
    ProxyType: 'http' | 'socks4' | 'socks5';
    Quality: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      source?: components['schemas']['Source'];
      /** Format: int32 */
      resolution?: number;
      modifier?: components['schemas']['Modifier'];
    };
    QualityDefinitionResource: {
      /** Format: int32 */
      id?: number;
      quality?: components['schemas']['Quality'];
      title?: string | null;
      /** Format: int32 */
      weight?: number;
      /** Format: double */
      minSize?: number | null;
      /** Format: double */
      maxSize?: number | null;
      /** Format: double */
      preferredSize?: number | null;
    };
    QualityModel: {
      quality?: components['schemas']['Quality'];
      revision?: components['schemas']['Revision'];
      hardcodedSubs?: string | null;
    };
    QualityProfileQualityItemResource: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      quality?: components['schemas']['Quality'];
      items?: components['schemas']['QualityProfileQualityItemResource'][] | null;
      allowed?: boolean;
    };
    QualityProfileResource: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      upgradeAllowed?: boolean;
      /** Format: int32 */
      cutoff?: number;
      items?: components['schemas']['QualityProfileQualityItemResource'][] | null;
      /** Format: int32 */
      minFormatScore?: number;
      /** Format: int32 */
      cutoffFormatScore?: number;
      formatItems?: components['schemas']['ProfileFormatItemResource'][] | null;
      language?: components['schemas']['Language'];
    };
    QueueBulkResource: {
      ids?: number[] | null;
    };
    QueueResource: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      movieId?: number | null;
      movie?: components['schemas']['MovieResource'];
      languages?: components['schemas']['Language'][] | null;
      quality?: components['schemas']['QualityModel'];
      customFormats?: components['schemas']['CustomFormatResource'][] | null;
      /** Format: double */
      size?: number;
      title?: string | null;
      /** Format: double */
      sizeleft?: number;
      timeleft?: components['schemas']['TimeSpan'];
      /** Format: date-time */
      estimatedCompletionTime?: string | null;
      status?: string | null;
      trackedDownloadStatus?: components['schemas']['TrackedDownloadStatus'];
      trackedDownloadState?: components['schemas']['TrackedDownloadState'];
      statusMessages?: components['schemas']['TrackedDownloadStatusMessage'][] | null;
      errorMessage?: string | null;
      downloadId?: string | null;
      protocol?: components['schemas']['DownloadProtocol'];
      downloadClient?: string | null;
      indexer?: string | null;
      outputPath?: string | null;
    };
    QueueResourcePagingResource: {
      /** Format: int32 */
      page?: number;
      /** Format: int32 */
      pageSize?: number;
      sortKey?: string | null;
      sortDirection?: components['schemas']['SortDirection'];
      filters?: components['schemas']['PagingResourceFilter'][] | null;
      /** Format: int32 */
      totalRecords?: number;
      records?: components['schemas']['QueueResource'][] | null;
    };
    QueueStatusResource: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      totalCount?: number;
      /** Format: int32 */
      count?: number;
      /** Format: int32 */
      unknownCount?: number;
      errors?: boolean;
      warnings?: boolean;
      unknownErrors?: boolean;
      unknownWarnings?: boolean;
    };
    RatingChild: {
      /** Format: int32 */
      votes?: number;
      /** Format: double */
      value?: number;
      type?: components['schemas']['RatingType'];
    };
    /** @enum {string} */
    RatingType: 'user' | 'critic';
    Ratings: {
      imdb?: components['schemas']['RatingChild'];
      tmdb?: components['schemas']['RatingChild'];
      metacritic?: components['schemas']['RatingChild'];
      rottenTomatoes?: components['schemas']['RatingChild'];
    };
    Rejection: {
      reason?: string | null;
      type?: components['schemas']['RejectionType'];
    };
    /** @enum {string} */
    RejectionType: 'permanent' | 'temporary';
    ReleaseResource: {
      /** Format: int32 */
      id?: number;
      guid?: string | null;
      quality?: components['schemas']['QualityModel'];
      customFormats?: components['schemas']['CustomFormatResource'][] | null;
      /** Format: int32 */
      customFormatScore?: number;
      /** Format: int32 */
      qualityWeight?: number;
      /** Format: int32 */
      age?: number;
      /** Format: double */
      ageHours?: number;
      /** Format: double */
      ageMinutes?: number;
      /** Format: int64 */
      size?: number;
      /** Format: int32 */
      indexerId?: number;
      indexer?: string | null;
      releaseGroup?: string | null;
      subGroup?: string | null;
      releaseHash?: string | null;
      title?: string | null;
      sceneSource?: boolean;
      movieTitles?: string[] | null;
      languages?: components['schemas']['Language'][] | null;
      approved?: boolean;
      temporarilyRejected?: boolean;
      rejected?: boolean;
      /** Format: int32 */
      tmdbId?: number;
      /** Format: int32 */
      imdbId?: number;
      rejections?: string[] | null;
      /** Format: date-time */
      publishDate?: string;
      commentUrl?: string | null;
      downloadUrl?: string | null;
      infoUrl?: string | null;
      downloadAllowed?: boolean;
      /** Format: int32 */
      releaseWeight?: number;
      indexerFlags?: string[] | null;
      edition?: string | null;
      magnetUrl?: string | null;
      infoHash?: string | null;
      /** Format: int32 */
      seeders?: number | null;
      /** Format: int32 */
      leechers?: number | null;
      protocol?: components['schemas']['DownloadProtocol'];
      /** Format: int32 */
      movieId?: number | null;
    };
    RemotePathMappingResource: {
      /** Format: int32 */
      id?: number;
      host?: string | null;
      remotePath?: string | null;
      localPath?: string | null;
    };
    RenameMovieResource: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      movieId?: number;
      /** Format: int32 */
      movieFileId?: number;
      existingPath?: string | null;
      newPath?: string | null;
    };
    /** @enum {string} */
    RescanAfterRefreshType: 'always' | 'afterManual' | 'never';
    RestrictionResource: {
      /** Format: int32 */
      id?: number;
      required?: string | null;
      preferred?: string | null;
      ignored?: string | null;
      tags?: number[] | null;
    };
    Revision: {
      /** Format: int32 */
      version?: number;
      /** Format: int32 */
      real?: number;
      isRepack?: boolean;
    };
    RootFolderResource: {
      /** Format: int32 */
      id?: number;
      path?: string | null;
      accessible?: boolean;
      /** Format: int64 */
      freeSpace?: number | null;
      unmappedFolders?: components['schemas']['UnmappedFolder'][] | null;
    };
    SelectOption: {
      /** Format: int32 */
      value?: number;
      name?: string | null;
      /** Format: int32 */
      order?: number;
      hint?: string | null;
      dividerAfter?: boolean;
    };
    /** @enum {string} */
    SortDirection: 'default' | 'ascending' | 'descending';
    /** @enum {string} */
    Source:
      | 'unknown'
      | 'cam'
      | 'telesync'
      | 'telecine'
      | 'workprint'
      | 'dvd'
      | 'tv'
      | 'webdl'
      | 'webrip'
      | 'bluray';
    /** @enum {string} */
    SourceType: 'tmdb' | 'mappings' | 'user' | 'indexer';
    /** @enum {string} */
    TMDbCountryCode: 'au' | 'br' | 'ca' | 'fr' | 'de' | 'gb' | 'it' | 'es' | 'us' | 'nz';
    TagDetailsResource: {
      /** Format: int32 */
      id?: number;
      label?: string | null;
      delayProfileIds?: number[] | null;
      notificationIds?: number[] | null;
      restrictionIds?: number[] | null;
      importListIds?: number[] | null;
      movieIds?: number[] | null;
      indexerIds?: number[] | null;
    };
    TagResource: {
      /** Format: int32 */
      id?: number;
      label?: string | null;
    };
    TaskResource: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      taskName?: string | null;
      /** Format: int32 */
      interval?: number;
      /** Format: date-time */
      lastExecution?: string;
      /** Format: date-time */
      lastStartTime?: string;
      /** Format: date-time */
      nextExecution?: string;
      lastDuration?: components['schemas']['TimeSpan'];
    };
    TimeSpan: {
      /** Format: int64 */
      ticks?: number;
      /** Format: int32 */
      days?: number;
      /** Format: int32 */
      hours?: number;
      /** Format: int32 */
      milliseconds?: number;
      /** Format: int32 */
      minutes?: number;
      /** Format: int32 */
      seconds?: number;
      /** Format: double */
      totalDays?: number;
      /** Format: double */
      totalHours?: number;
      /** Format: double */
      totalMilliseconds?: number;
      /** Format: double */
      totalMinutes?: number;
      /** Format: double */
      totalSeconds?: number;
    };
    /** @enum {string} */
    TrackedDownloadState:
      | 'downloading'
      | 'importPending'
      | 'importing'
      | 'imported'
      | 'failedPending'
      | 'failed'
      | 'ignored';
    /** @enum {string} */
    TrackedDownloadStatus: 'ok' | 'warning' | 'error';
    TrackedDownloadStatusMessage: {
      title?: string | null;
      messages?: string[] | null;
    };
    UiConfigResource: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      firstDayOfWeek?: number;
      calendarWeekColumnHeader?: string | null;
      movieRuntimeFormat?: components['schemas']['MovieRuntimeFormatType'];
      shortDateFormat?: string | null;
      longDateFormat?: string | null;
      timeFormat?: string | null;
      showRelativeDates?: boolean;
      enableColorImpairedMode?: boolean;
      /** Format: int32 */
      movieInfoLanguage?: number;
      /** Format: int32 */
      uiLanguage?: number;
    };
    UnmappedFolder: {
      name?: string | null;
      path?: string | null;
    };
    UpdateChanges: {
      new?: string[] | null;
      fixed?: string[] | null;
    };
    /** @enum {string} */
    UpdateMechanism: 'builtIn' | 'script' | 'external' | 'apt' | 'docker';
    UpdateResource: {
      /** Format: int32 */
      id?: number;
      version?: components['schemas']['Version'];
      branch?: string | null;
      /** Format: date-time */
      releaseDate?: string;
      fileName?: string | null;
      url?: string | null;
      installed?: boolean;
      /** Format: date-time */
      installedOn?: string | null;
      installable?: boolean;
      latest?: boolean;
      changes?: components['schemas']['UpdateChanges'];
      hash?: string | null;
    };
    Version: {
      /** Format: int32 */
      major?: number;
      /** Format: int32 */
      minor?: number;
      /** Format: int32 */
      build?: number;
      /** Format: int32 */
      revision?: number;
      /** Format: int32 */
      majorRevision?: number;
      /** Format: int32 */
      minorRevision?: number;
    };
  };
}

export interface operations {}

export interface external {}
