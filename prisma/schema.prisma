// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// config

//TODO: add widgets 
model config {
  id               String         @id @default(uuid())
  schemaVersion    Int
  configProperties configProperty @relation(fields: [configPropertyId], references: [id])
  configPropertyId String
  categories       categories[]
  wrappers         wrappers[]
  apps             app[]
  settings         settings       @relation(fields: [settingsId], references: [id])
  settingsId       String
}

model configProperty {
  id     String   @id @default(uuid())
  name   String   @unique
  config config[]
}

// app model
model app {
  id               String         @id @default(uuid())
  name             String         @unique
  url              String         @unique
  behaviour        appBehaviour   @relation(fields: [appBehaviourId], references: [id])
  appBehaviourId   String
  network          appNetwork     @relation(fields: [appNetworkId], references: [id])
  appNetworkId     String
  appearance       appAppearance  @relation(fields: [appAppearanceId], references: [id])
  appAppearanceId  String
  integration      appIntegration @relation(fields: [appIntegrationId], references: [id])
  appIntegrationId String
  area             areaType       @relation(fields: [areaTypeId], references: [id])
  areaTypeId       String
  shape            sizedShape     @relation(fields: [sizedShapeId], references: [id])
  sizedShapeId     String
  config           config?        @relation(fields: [configId], references: [id])
  configId         String?
}

model appBehaviour {
  id              String  @id @default(uuid())
  onClickUrl      String  @unique
  externalUrl     String  @unique
  isOpeningNewTab Boolean
  app             app[]
}

model appNetwork {
  id                   String     @id @default(uuid())
  enabledStatusChecker Boolean
  statusCodes          httpCode[]
  app                  app[]
}

model httpCode {
  id           String      @id @default(uuid())
  code         String      @unique
  description  String      @unique
  appNetwork   appNetwork? @relation(fields: [appNetworkId], references: [id])
  appNetworkId String?
}

model appAppearance {
  id      String @id @default(uuid())
  iconUrl String
  app     app[]
}

model appIntegration {
  id                       String                 @id @default(uuid())
  type                     String                 @unique
  properties               appIntegrationProperty @relation(fields: [appIntegrationPropertyId], references: [id])
  appIntegrationPropertyId String
  app                      app[]
}

model appIntegrationProperty {
  id                 String           @id @default(uuid())
  type               String           @unique
  field              integrationField @relation(fields: [integrationFieldId], references: [id])
  integrationFieldId String
  value              String?
  isDefined          Boolean
  appIntegration     appIntegration[]
}

model integrationField {
  id                     String                   @id @default(uuid())
  appIntegrationProperty appIntegrationProperty[]
}

model sizedShape {
  id            String      @id @default(uuid())
  sm            smallShape  @relation(fields: [smallShapeId], references: [id])
  smallShapeId  String
  md            mediumShape @relation(fields: [mediumShapeId], references: [id])
  mediumShapeId String
  lg            largeShape  @relation(fields: [largeShapeId], references: [id])
  largeShapeId  String
  app           app[]
}

model smallShape {
  id              String        @id @default(uuid())
  location        shapeLocation @relation(fields: [shapeLocationId], references: [id])
  shapeLocationId String
  size            shapeSize     @relation(fields: [shapeSizeId], references: [id])
  shapeSizeId     String
  sizedShape      sizedShape[]
}

model mediumShape {
  id              String        @id @default(uuid())
  location        shapeLocation @relation(fields: [shapeLocationId], references: [id])
  shapeLocationId String
  size            shapeSize     @relation(fields: [shapeSizeId], references: [id])
  shapeSizeId     String
  sizedShape      sizedShape[]
}

model largeShape {
  id              String        @id @default(uuid())
  location        shapeLocation @relation(fields: [shapeLocationId], references: [id])
  shapeLocationId String
  size            shapeSize     @relation(fields: [shapeSizeId], references: [id])
  shapeSizeId     String
  sizedShape      sizedShape[]
}

model shapeLocation {
  id          String        @id @default(uuid())
  name        String
  mediumShape mediumShape[]
  smallShape  smallShape[]
  largeShape  largeShape[]
}

model shapeSize {
  id          String        @id @default(uuid())
  name        String
  mediumShape mediumShape[]
  smallShape  smallShape[]
  largeShape  largeShape[]
}

model areaType {
  id               String         @id @default(uuid())
  type             String
  properties       areaProperties @relation(fields: [areaPropertiesId], references: [id])
  areaPropertiesId String
  app              app[]
}

model areaProperties {
  id       String     @id @default(uuid())
  location String?
  areaType areaType[]
}

//categories
model categories {
  id       String  @id @default(uuid())
  name     String
  position Int
  type     String
  config   config? @relation(fields: [configId], references: [id])
  configId String?
}

//wrappers
model wrappers {
  id       String  @id @default(uuid())
  position Int
  config   config? @relation(fields: [configId], references: [id])
  configId String?
}

//widgets

//settings
model settings {
  id                     String               @id @default(uuid())
  common                 settingSearchEngines @relation(fields: [settingSearchEnginesId], references: [id])
  settingSearchEnginesId String
  customization          settingCustomization @relation(fields: [settingCustomizationId], references: [id])
  settingCustomizationId String
  config                 config[]
}

model settingSearchEngines {
  id                       String                 @id @default(uuid())
  type                     String
  properties               searchEngineProperties @relation(fields: [searchEnginePropertiesId], references: [id])
  searchEnginePropertiesId String
  settings                 settings[]
}

model searchEngineProperties {
  id                   String                 @id @default(uuid())
  settingSearchEngines settingSearchEngines[]
}

model settingCustomization {
  id                    String              @id @default(uuid())
  settings              settings[]
  layout                customizationLayout @relation(fields: [customizationLayoutId], references: [id])
  customizationLayoutId String
  pageTitle             String
  logoImageUrl          String
  faviconUrl            String
  backgroundImageUrl    String
  customCss             String
  colors                customizationColors @relation(fields: [customizationColorsId], references: [id])
  customizationColorsId String
  appOpacity            Int
}

model customizationLayout {
  id                   String                 @id @default(uuid())
  enabledLeftSidebar   Boolean
  enabledRightSidebar  Boolean
  enabledDocker        Boolean
  enabledPing          Boolean
  enabledSearchbar     Boolean
  settingCustomization settingCustomization[]
}

model customizationColors {
  id                   String                 @id @default(uuid())
  primary              String
  secondary            String
  shade                Int
  settingCustomization settingCustomization[]
}
